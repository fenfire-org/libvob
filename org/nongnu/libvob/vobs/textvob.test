# -*-python-*-
# 
# Copyright (c) 2003, Asko Soukka
# Copyright (c) 2003, Tuomas J. Lukka
# 
# This file is part of Gzz.
# 
# Gzz is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# Gzz is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General
# Public License along with Gzz; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
# 
# 


"""
Test text sizes, rendering etc.
"""

from test.tools.gfx import *
from java.awt import Color
import java

sty1 = win.getGraphicsAPI().getTextStyle("SansSerif", 0, 20)

dbg = 0

def testWH():
    """Test that TextVob is drawn with the width and height
    that it claims with getWidth() and getHeight().
    """
    text_scale = 0
    for scale in range(1, 3):
	text_scale += scale
    	vs = getvs()
    	size = vs.getSize()
    	vs.map.put(vob.vobs.SolidBackdropVob(Color.red))
    	textvob = vob.vobs.TextVob(sty1, "Xj"+chr(196)+"j"+chr(197)+"j"+chr(214)+"jX")

	quadFont = sty1.getQuadFont()

    	text_width = int(textvob.getWidth(text_scale))
   	text_height = int(textvob.getHeight(text_scale))
    	text_depth = int(textvob.getDepth(text_scale))

	sizes = (text_width, text_height, text_depth)
	if dbg: print "SIZES:",sizes
	assert 50 < text_width < 200, sizes
	assert 10 < text_height < 60, sizes
	assert 1 < text_depth < 30, sizes


	if dbg: print "meas"
	def sl():
	    if dbg: java.lang.Thread.sleep(4000)

    	cs = vs.orthoBoxCS(0, "window",  0, 100, 100, 1, 1, size.width, size.height)
    	cs_text = vs.orthoCS(cs, "text", 0, 0, 0, text_height + text_depth, text_height + text_depth)
    	vs.map.put(textvob, cs_text)

	sl()

	if dbg: print "rendering"
    	render(vs)

	sl()

	if dbg: print "rendered"

    	"""The top edge."""
    	checkNotAvgColor(100, 100, text_width, 10, (255, 0, 0), delta=1)
	if dbg: print "checked1"

	sl()

    	"""The left edge."""
    	checkNotAvgColor(100, 100, 10, text_height+text_depth, (255, 0, 0), delta=1)
	if dbg: print "checked2"

	sl()

    	"""The right edge."""
    	checkNotAvgColor(100+text_width-10, 100, 10, text_height+text_depth, (255, 0, 0), delta=1)
	if dbg: print "checked3"
	sl()

    	"""The bottom edge."""
    	checkNotAvgColor(100, 100+text_height-1, text_width, text_depth+1, (255, 0, 0), delta=1)
	if dbg: print "checkedX1"
	sl()

    	"""The top side."""
    	checkAvgColor(100, 100-19, text_width, 10, (255, 0, 0), delta=1)

    	"""The left side."""
    	checkAvgColor(100-19, 100, 10, text_height+text_depth, (255, 0, 0), delta=1)

    	"""The right side."""
    	checkAvgColor(100+text_width+10, 100, 10, text_height+text_depth, (255, 0, 0), delta=1)

    	"""The bottom side."""
    	checkAvgColor(100, 100+text_height+text_depth+10, text_width, 10, (255, 0, 0), delta=1)

	if dbg: print "finished"

def testEmpty():
    """ Empty string has been found to jam the machine elsewhere.
    This test convinces that the problem isn't in TextVob.
    """
    quadFont = sty1.getQuadFont()
    text_scale = 1
    vs = getvs()
    size = vs.getSize()
    vs.map.put(vob.vobs.SolidBackdropVob(Color.red))
    textvob = vob.vobs.TextVob(sty1, None)
    
    text_width = int(textvob.getWidth(text_scale))
    text_height = int(textvob.getHeight(text_scale))
    text_depth = int(textvob.getDepth(text_scale))
    
    cs = vs.orthoBoxCS(0, "window",  0, 100, 100, 1, 1, size.width, size.height)
    cs_text = vs.orthoCS(cs, "text", 0, 0, 0, text_height + text_depth, text_height + text_depth)
    vs.map.put(textvob, cs_text)
    render(vs)




# : vim: set syntax=python :
