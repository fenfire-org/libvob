/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM org/nongnu/libvob/lob/Lobs.rj,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 *//* -*-java-*-
Lobs.java
 *    
 *    Copyright (c) 2005, Benja Fallenstein
 *
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.lob;
import org.nongnu.libvob.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.lobs.*;
import org.nongnu.libvob.vobs.*;
import org.nongnu.libvob.util.*;
import javolution.lang.*;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

/** Static methods for creating common kinds of lobs.
 */
public class Lobs {

    private static final LocalContext.Variable 
	WINDOW_ANIMATION = new LocalContext.Variable(null),
	FOCUS_MODEL = new LocalContext.Variable(null);

    private static LobFont defaultFont;



    public static Lob rect(Color color, float lineWidth) {
	return VobLob.newInstance(RectVob.newInstance(color, lineWidth));
    }

    public static Lob rect3d(Color color, float lineWidth, boolean raised) {
	return VobLob.newInstance(RectVob.newInstance(color, lineWidth, 
						      raised));
    }

    public static Lob filledRect(Color color) {
	return VobLob.newInstance(FilledRectVob.newInstance(color));
    }

    public static Lob line(Color color, float x1, float y1, 
			   float x2, float y2) {
	Vob conn = SimpleConnection.newInstance(x1, y1, x2, y2, color);
	return VobLob.newInstance(conn);
    }

    public static Lob label(Text t) {
	return hbox(text(t));
    }

    public static Lob label(String s) {
	return hbox(text(s));
    }

    public static Lob translate(Lob l, float x, float y) {
	return translate(l, x, y, 0);
    }

    public static Lob translate(Lob l, float x, float y, float z) {
	return TranslateLob.newInstance(l, x, y, z);
    }

    public static Lob scale(Lob l, float scale) {
	return scale(l, scale, scale);
    }

    public static Lob scale(Lob l, float sx, float sy) {
	return translate(l, sx, sy);
    }

    public static Lob margin(Lob l, float margin) {
	return margin(l, margin, margin);
    }

    public static Lob margin(Lob l, float xmargin, float ymargin) {
	return margin(l, xmargin, xmargin, ymargin, ymargin);
    }

    public static Lob margin(Lob l, float left, float right,
			     float top, float bottom) {
	return Margin.newInstance(l, left, right, top, bottom);
    }

    public static Lob clip(Lob l) {
	return ClipLob.newInstance(l);
    }

    public static Lob nullLob() {
	return NullLob.instance;
    }

    public static Lob glue(Axis axis, float min, float nat, float max) {
	return request(axis, nullLob(), min, nat, max);
    }

    public static Lob glue(float minW, float natW, float maxW,
			   float minH, float natH, float maxH) {
	return request(nullLob(), minW, natW, maxW, minH, natH, maxH);
    }

    public static Lob align(Lob content, float x, float y) {
	return align(content, x, y, x, y);
    }

    public static Lob align(Lob delegate, float childX, float childY, 
			    float parentX, float parentY) {
	return new_AbstractPositionLob_1(delegate,childX,childY,parentX,parentY);
    }

    public static Lob between(Lob back, Lob middle, Lob front) {
	return Between.newInstance(back, middle, front);
    }

    public static Lob request(Axis axis, Lob content, 
			      float min, float nat, float max) {
	return RequestChangeLob.newInstance(axis, content, min, nat, max);
    }

    public static Lob request(Lob content, float minW, float natW, float maxW,
			      float minH, float natH, float maxH) {
	return RequestChangeLob.newInstance(content, minW, natW, maxW, 
					    minH, natH, maxH);
    }

    public static Lob nextTo(Axis axis, Lob lob, Lob popup) {
	return NextToLob.newInstance(axis, lob, popup);
    }

    public static Lob key(Lob content, Object key) {
	return key(content, key, -1);
    }

    public static Lob key(Lob content, Object key, int intKey) {
	return KeyLob.newInstance(content, key, intKey);
    }

    public static List keyList(List lobs, Object key) {
	return new_RealtimeList_2(lobs,key);
    }

    public static Lob frame(Lob content, Color bg, Color border, 
			    float lineWidth, float margin, boolean clip) {
	Lob _bg     = bg==null     ? null : filledRect(bg);
	Lob _border = border==null ? null : rect(border, lineWidth);

	content = margin(content, lineWidth+margin);
	if(clip) content = clip(content);

	return between(_bg, content, _border);
    }

    public static Lob frame3d(Lob content, Color bg, Color border, 
			      float lineWidth, float margin, boolean clip, 
			      boolean raised) {
	Lob _bg     = bg==null     ? null : filledRect(bg);
	Lob _border = border==null ? null : rect3d(border, lineWidth, raised);

	content = margin(content, lineWidth+margin);
	if(clip) content = clip(content);

	return Between.newInstance(_bg, content, _border);
    }

    public static Lob decorate(Lob child, Lob decoration, Object key,
			       int intKey) {
	return DecoratorLob.newInstance(child, decoration, key, intKey);
    }

    public static Lob clickController(Lob child, int button, Action action) {
	return ClickController.newInstance(child, button, action);
    }

    public static Lob keyController(Lob child, Map actions) {
	return KeyController.newInstance(child, actions);
    }

    public static Lob hbox() {
	return hbox(Lists.list());
    }

    public static Lob hbox(List items) {
	return box(Axis.X, items);
    }

    public static Lob vbox() {
	return vbox(Lists.list());
    }

    public static Lob vbox(List items) {
	return box(Axis.Y, items);
    }

    public static Lob box(Axis axis) {
	return box(axis, Lists.list());
    }

    public static Lob box(Axis axis, List items) {
	return BoxLob.newInstance(axis, items);
    }

    public static Lob linebreaker(List items) {
	return linebreaker(Axis.X, items);
    }

    public static Lob linebreaker(Axis lineAxis, List items) {
	return LinebreakerLob.newInstance(lineAxis, items);
    }

    public static Lob tray(boolean sendEventsOnlyToFrontLob) {
	return tray(Lists.list(), sendEventsOnlyToFrontLob);
    }

    public static Lob tray(List lobs, boolean sendEventsOnlyToFrontLob) {
	return Tray.newInstance(lobs, sendEventsOnlyToFrontLob);
    }

    public static LobFont font(Color color) {
	LobFont font = SimpleLobFont.newInstance("serif", 0, 16, color);
	return FilterLobFont.newInstance(font);
    }

    public static LobFont font() {
	if(defaultFont == null) {
	    defaultFont = font(Color.black);
	    defaultFont.move(Realtime.ObjectSpace.HEAP);
	}
	return defaultFont;
    }

    public static List text(String s) {
	return text(font(), s);
    }

    public static List text(LobFont font, String s) {
	return text(font, Text.valueOf(s));
    }

    public static List text(Text text) {
	return text(font(), text);
    }

    public static List text(LobFont font, Text text) {
	return TextLobList.newInstance(font, text);
    }

    public static Model getFocusModel() {
	return (Model)FOCUS_MODEL.getValue();
    }

    public static void setFocusModel(Model value) {
	FOCUS_MODEL.setValue(value);
    }

    public static WindowAnimation getWindowAnimation() {
	return (WindowAnimation)WINDOW_ANIMATION.getValue();
    }

    public static void setWindowAnimation(WindowAnimation value) {
	WINDOW_ANIMATION.setValue(value);
    }

        private static class _AbstractPositionLob_1 extends AbstractPositionLob {

            private _AbstractPositionLob_1() {}

             float childX; float childY; float parentX; float parentY;

            
	    public Lob layout(float width, float height) {
		SizeRequest s = delegate.getSizeRequest();
		
		float x = parentX*width  - childX*s.natW;
		float y = parentY*height - childY*s.natH;
		
		Lob l = delegate.layout(s.natW, s.natH);
		l = TranslateLob.newInstance(l, x, y, 0);
		return l.layout(width, height);
	    }
	

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(((Object)delegate) instanceof Realtime) ((Realtime)((Object)delegate)).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _AbstractPositionLob_1_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _AbstractPositionLob_1(); }
            };

        private static _AbstractPositionLob_1 new_AbstractPositionLob_1(Lob delegate, float childX, float childY, float parentX, float parentY) {
            _AbstractPositionLob_1 the_new_AbstractPositionLob_1 = (_AbstractPositionLob_1)_AbstractPositionLob_1_FACTORY.object();
            the_new_AbstractPositionLob_1.delegate = delegate;
the_new_AbstractPositionLob_1.childX = childX;
the_new_AbstractPositionLob_1.childY = childY;
the_new_AbstractPositionLob_1.parentX = parentX;
the_new_AbstractPositionLob_1.parentY = parentY;
            return the_new_AbstractPositionLob_1;
        }
    
        private static class _RealtimeList_2 extends RealtimeList {

            private _RealtimeList_2() {}

            List lobs; Object key;

            
	    public int size() { return lobs.size(); }
	    public Object get(int i) {
		Lob lob = (Lob)lobs.get(i);
		return key(lob, key, i);
	    }
	

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(((Object)lobs) instanceof Realtime) ((Realtime)((Object)lobs)).move(os); if(((Object)key) instanceof Realtime) ((Realtime)((Object)key)).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _RealtimeList_2_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _RealtimeList_2(); }
            };

        private static _RealtimeList_2 new_RealtimeList_2(List lobs, Object key) {
            _RealtimeList_2 the_new_RealtimeList_2 = (_RealtimeList_2)_RealtimeList_2_FACTORY.object();
            the_new_RealtimeList_2.lobs = lobs;
the_new_RealtimeList_2.key = key;
            return the_new_RealtimeList_2;
        }
    }
