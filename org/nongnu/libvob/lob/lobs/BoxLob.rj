/* -*-java-*-
BoxLob.java
 *    
 *    Copyright (c) 2003-2005, Benja Fallenstein
 *
 *    This file is part of libvob.
 *    
 *    libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.lob.lobs;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.*;
import org.nongnu.libvob.impl.DefaultVobMap; // for chaining coordinate systems
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.util.*;

/** A lob that renders an hbox or vbox of lobs.
 */
public class BoxLob extends AbstractSequence {
    private static void p(String s) { System.out.println("BoxLob:: "+s); }

    protected TableLob.Table getTable() {
	return new @realtime-i TableLob.Table(Axis axis, float otherAxisSize, List lobs) {
	
	    public int getRowCount() {
		return (axis == Axis.Y) ? lobs.size() : 1;
	    }
	    public int getColumnCount() {
		return (axis == Axis.X) ? lobs.size() : 1;
	    }

	    public Lob getLob(int row, int column) {
		if((axis == Axis.X && row != 0) ||
		   (axis == Axis.Y && column != 0))
		    throw new IndexOutOfBoundsException(row+" "+column);
		
		Lob lob = (Lob)lobs.get((axis == Axis.X) ? column : row);
		
		if(otherAxisSize < 0 || axis.other() != lob.getLayoutableAxis())
		    return lob;
		else
		    return lob.layoutOneAxis(otherAxisSize);
	    }
	};
    }

    private Axis axis;

    private float otherAxisSize; // size along the other axis; -1 if unknown

    private TableLob tableLob;

    private BoxLob() {}

    public static BoxLob newInstance(Axis axis, List lobs) {
	return newInstance(axis, lobs, -1);
    }

    private static BoxLob newInstance(Axis axis, List lobs, 
				      float otherAxisSize) {
	BoxLob bl = (BoxLob)FACTORY.object();
	bl.axis = axis; bl.lobs = lobs; bl.otherAxisSize = otherAxisSize;
	bl.tableLob = TableLob.newInstance(bl.getTable());
	return bl;
    }

    public void add(Lob l) {
	super.add(l);
	tableLob.init();
    }

    public SizeRequest getSizeRequest() {
	return tableLob.getSizeRequest();
    }

    public boolean mouse(VobMouseEvent e, VobScene sc, int cs, 
			 float x, float y) { 
	throw new UnsupportedOperationException("not layouted");
    }

    public Lob layout(float width, float height) {
	return tableLob.layout(width, height);
    }

    public Axis getLayoutableAxis() {
	return tableLob.getLayoutableAxis();
    }

    public Lob layoutOneAxis(float size) {
	return tableLob.layoutOneAxis(size);
    }

    public void render(VobScene scene, int into, int matchingParent, 
		       float d, boolean visible) {
	throw new UnsupportedOperationException("not layouted");
    }

    public boolean move(ObjectSpace os) {
	if(super.move(os)) {
	    tableLob.move(os);
	    return true;
	}
	return false;
    }

    private static final Factory FACTORY = new Factory() {
	    public Object create() {
		return new BoxLob();
	    }
	};
}
