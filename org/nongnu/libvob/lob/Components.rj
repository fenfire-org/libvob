/* -*-java-*-
Components.rj
 *    
 *    Copyright (c) 2005, Benja Fallenstein
 *
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.lob;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.lobs.*;
import javolution.lang.*;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class Components {

    public static Object getParam(Map params, String name, Object _default) {
	if(params.get(name) != null)
	    return params.get(name);
	else
	    return _default;
    }

    public static Model getModel(Map params, String name, Object _default) {
	return (Model)getParam(params, name, 
			       StateModel.newInstance(name, _default));
    }

    public static Model getModel(Map params, String name, int _default) {
	return (Model)getParam(params, name, 
			       StateModel.newInstance(name, _default));
    }

    public static Object getState(Map params, String name, Object _default) {
	return getModel(params, name, _default).get();
    }

    public static void setState(Map params, String name, Object value) {
	getModel(params, name, null).set(value);
    }


    
    public static Color 
	lightColor = new java.awt.Color(1, 1, .9f),
	darkColor = new java.awt.Color(.7f, .5f, .5f);

    private static LobFont defaultFont;



    public static LobFont font(Color color) {
	LobFont font = SimpleLobFont.newInstance("serif", 0, 16, color);
	return FilterLobFont.newInstance(font);
    }

    public static LobFont font() {
	if(defaultFont == null) {
	    defaultFont = font(Color.black);
	    defaultFont.move(Realtime.ObjectSpace.HEAP);
	}
	return defaultFont;
    }

    public static Lob label(Text t) {
	return Lobs.hbox(font().textLn(t));
    }

    public static Lob label(String s) {
	return Lobs.hbox(font().textLn(s));
    }



    public static Lob frame(Lob lob) {
	return frame(lob, Maps.map());
    }

    public static Lob frame(Lob lob, Map params) {
	boolean clip =
	    getParam(params, "clip", Boolean.TRUE) == Boolean.TRUE;

	return Lobs.frame(lob, lightColor, darkColor, 1, 3, clip);
    }

    public static Lob button(Lob content, Action action) {
	Lob lob = content;
	lob = Lobs.align(content, .5f, .5f);
	lob = Lobs.request(lob, 50, -1, SizeRequest.INF,
			   15, -1, SizeRequest.INF);
	lob = frame(lob);
	lob = Lobs.clickController(lob, 1, action);
	return lob;
    }

    /** A checkbox without a label or stuff like that, just the box.
     */
    public static Lob singleCheckBox(Model state) {
	Lob lob;

	if(state.get() == Boolean.TRUE) {
	    lob = Lobs.tray(false);
	    lob.add(Lobs.line(Color.black, 0, 0, 1, 1));
	    lob.add(Lobs.line(Color.black, 0, 1, 1, 0));
	} else {
	    lob = Lobs.nullLob();
	}

	lob = frame(lob);

	lob = Lobs.clickController(lob, 1, new @realtime-i Action(Model state) {
	    public void run() {
		if(state.get() == Boolean.TRUE) {
		    state.set(Boolean.FALSE);
		} else {
		    state.set(Boolean.TRUE);
		}
	    }
	});

	lob = Lobs.request(lob, 15, 15, 15, 15, 15, 15);
	return lob;
    }

    public static Lob listBox(List elements, Map params) {
	Transform tr = (Transform)getParam(params, "transform", 
					   toStringTransform());

	Object defaultSelection = elements.size() > 0 ? elements.get(0) : null;
	Model selected = getModel(params, "selected", defaultSelection);

	Axis axis = (Axis)getParam(params, "axis", Axis.Y);

	tr = new @realtime-i Transform(Transform tr, Model selected) {
	    public Object transform(Object o) {
		Lob lob = (Lob)tr.transform(o);
		lob = Lobs.margin(lob, 1);

		Action select = new @realtime-i Action(Model selected,
						       Object o) {
		    public void run() {
			selected.set(o);
		    }
		};

		lob = Lobs.clickController(lob, 1, select);
                    
		return Lobs.key(lob, o);
	    }
	};

	List lobs = Lists.transform(elements, tr);
	Lob glue = Lobs.glue(axis, 0, 0, SizeRequest.INF);
	lobs = Lists.concat(lobs, Lists.list(glue));

	Lob lob = Lobs.box(axis, lobs);
	
        Lob cursor_lob = Lobs.filledRect(darkColor);
        cursor_lob = Lobs.key(cursor_lob, "cursor");
        lob = Lobs.decorate(lob, cursor_lob, selected.get(), -1);

	lob = Lobs.viewport(axis, lob, selected.get(), -1);

	lob = frame(lob);
	return lob;
    }

    private static List getTreeList(Tree tree, Object parent) {
	List list = Lists.list();

	if(parent != null)
	    list.add(parent);
	
	for(Iterator i=tree.getChildren(parent).iterator(); i.hasNext();)
	    list.addAll(getTreeList(tree, i.next()));

	return list;
    }

    public static Lob treeBox(Tree tree, Map params) {
	Transform tr = (Transform)getParam(params, "transform", 
					   toStringTransform());

	List list = getTreeList(tree, null);

	return listBox(list, Maps.map("transform", new @realtime-i Transform(Tree tree, Transform tr) {
	    public Object transform(Object node) { 
		int level = -1;
		for(Object o=node; o!=null; o=tree.getParent(o))
		    level++;

		Lob hbox = Lobs.hbox();
		hbox.add(Lobs.glue(Axis.X, 20*level, 20*level, 20*level));
		hbox.add((Lob)tr.transform(node));

		return hbox;
	    }
	}));
    }

    public static Lob textBox(Model text, Map params) {
	params.put("multiline", Boolean.FALSE);
	return textComponent(text, params);
    }

    public static Lob textArea(Model text, Map params) {
	params.put("multiline", Boolean.TRUE);
	return textComponent(text, params);
    }

    public static Lob textComponent(Model text, Map params) {

	Model cursor = (Model)getModel(params, "cursor", -1);
	LobFont font = (LobFont)getParam(params, "font", font());

	Boolean multilineB = (Boolean)getParam(params, "multiline", null);
	boolean multiline = multilineB.booleanValue();

	Text txt = Text.valueOf((String)text.get());
	List list = font.text(txt);
	list = Lobs.keyList(list, "text");
	Lob lob = multiline ? Lobs.linebreaker(list) : Lobs.hbox(list);

        Lob cursor_lob = Lobs.line(java.awt.Color.black, 0, 0, 0, 1);
        cursor_lob = Lobs.key(cursor_lob, "textcursor");
        lob = Lobs.decorate(lob, cursor_lob, "text", cursor.getInt());

	lob = Lobs.viewport(multiline ? Axis.Y : Axis.X,
			    lob, "text", cursor.getInt());
	
        lob = TextKeyController.newInstance(lob, text, cursor);

	return frame(lob);
    }
    
    public static Lob menuitem(String s, Action action) {
	return menuitem(label(s), action);
    }

    public static Lob menuitem(Lob lob, Action action) {
	Action _action = action; // XXX close menu if necessary!

	lob = Lobs.margin(lob, 8, 2);
	return Lobs.clickController(lob, 1, _action);
    }

    public static Lob menuitem(String s, Lob submenu) {
	return menuitem(label(s), submenu);
    }

    public static Lob menuitem(Lob lob, Lob submenu) {
	Model openModel = StateModel.newInstance("open", Boolean.FALSE);

	Action action = new @realtime-i Action(Model openModel) {
	    public void run() {
		Boolean open = (Boolean)openModel.get();
		if(open == Boolean.FALSE) {
		    openModel.set(Boolean.TRUE);
		} else {
		    openModel.set(Boolean.FALSE);
		}
	    }
	};

	lob = Lobs.margin(lob, 8, 2);

	if(openModel.get() == Boolean.TRUE)
	    lob = Lobs.nextTo(Axis.Y, lob, submenu);
	    
	lob = Lobs.clickController(lob, 1, action);

	return lob;
    }

    public static Lob menubar() {
	return menu(Axis.X, Lists.list());
    }

    public static Lob menu() {
	return menu(Axis.Y, Lists.list());
    }

    public static Lob menu(Axis axis, List items) {
	Lob l = Lobs.box(axis, items);
	l = Lobs.align(l, 0, 0);
	l = Lobs.frame3d(l, lightColor, darkColor, 1, 0, false, true);
	l = Lobs.frame(l, null, darkColor, 1, 0, true);

	return l;
    }


    public static Transform toStringTransform() {
	return new @realtime-i Transform() {
	    public Object transform(Object o) {
		if(o instanceof Realtime)
		    return label(((Realtime)o).toText());
		else
		    return label(o.toString());
	    }
	};
    }
}
