/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM org/nongnu/libvob/demo/Notebook.rj,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 *//* -*-java-*-
Notebook.rj
 *    
 *    Copyright (c) 2004, Benja Fallenstein.
 *
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.demo;
import org.nongnu.libvob.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.impl.NewLobMain;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class Notebook extends NewLobMain {

    protected static class Note {
	protected String title = "New note "+new Date();
	protected String body = "";

	public String getTitle() { return title; }
	public String getBody() { return body; }
	public void setTitle(String title) { this.title = title; }
	public void setBody(String body) { this.body = body; }
    }

    protected List notes = new ArrayList();
    protected Model selectedNote = SimpleModel.newInstance();

    public Notebook(Color bg) {
	super(bg);

	selectedNote.set(new Note());
	notes.add(new Note());
	notes.add(selectedNote.get());
	notes.add(new Note());
    }

    public Lob createLob() {
	Action quit = new_Action_1();
	Action newNote = new_Action_2(notes,selectedNote);
	Action deleteNote = new_Action_3(notes,selectedNote);


	Lob outerVBox = Lobs.vbox();

	Lob menubar = Components.menubar();

	RoleContext.enter("MENU"); 
	try {
	    menubar.add(Components.menuitem("Quit", quit));
	    menubar.add(Lobs.glue(Axis.X, 8, 8, 8));
	    menubar.add(Components.menuitem("New note", newNote));
	    menubar.add(Lobs.glue(Axis.X, 8, 8, 8));
	    menubar.add(Components.menuitem("Delete note", deleteNote));

	    outerVBox.add(RoleContext.lob(menubar));
	} finally {
	    RoleContext.exit();
	}

	/*
	Menu filemenu = menubar.addMenu("File");
	filemenu.add("Quit", quit);

	Menu notemenu = menubar.addMenu("Note");
	notemenu.add("New note", newNote);
	notemenu.add("Delete note", deleteNote);
	*/

	outerVBox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	Lob hbox = Lobs.hbox();

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	Lob noteList = Components.listBox(notes, Maps.map(
	    "selected", selectedNote,
	    "transform", new_Transform_4()));

	noteList = Lobs.key(noteList, "note list");

	hbox.add(Lobs.request(Axis.X, noteList, 100, 250, 250));

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	Lob vbox = Lobs.vbox();

	RoleContext.enter("title"); 
	try {
	    Model titleModel = new_Model_5(selectedNote);

	    Lob titleLob = Components.textBox(titleModel, Maps.map());
	    titleLob = RoleContext.lob(titleLob);
	    vbox.add(titleLob);
	} finally {
	    RoleContext.exit();
	}

	vbox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	RoleContext.enter("body"); 
	try {
	    Model bodyModel = new_Model_6(selectedNote);
	    
	    Lob bodyLob = Components.textArea(bodyModel, Maps.map());
	    bodyLob = Lobs.request(Axis.Y, bodyLob, 30, 100, SizeRequest.INF);
	    bodyLob = RoleContext.lob(bodyLob);
	    vbox.add(bodyLob);
	} finally {
	    RoleContext.exit();
	}

	hbox.add(vbox);

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	outerVBox.add(hbox);

	outerVBox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	Lob lob = outerVBox;

	/*
	KeyController k = new KeyController(new FocusLob(outerVBox));
	k.add("Ctrl-N", newNote);
	*/

	return lob;
    }

    public static void main(String[] argv) {
	Notebook demo = new Notebook(new Color(1, 1, .8f));
	demo.start();
    }

        private static class _Action_1 extends RealtimeObject implements Action {

            private _Action_1() {}

            ;

             
	    public void run() {
		System.exit(0);
	    }
	

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Action_1_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Action_1(); }
            };

        private static _Action_1 new_Action_1() {
            _Action_1 the_new_Action_1 = (_Action_1)_Action_1_FACTORY.object();
            
            return the_new_Action_1;
        }
    
        private static class _Action_2 extends RealtimeObject implements Action {

            private _Action_2() {}

            List notes; Model selectedNote;

             
	    public void run() {
		Note n = new Note();
		notes.add(n);
		selectedNote.set(n);
	    }
	

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(notes instanceof Realtime) ((Realtime)notes).move(os); if(selectedNote instanceof Realtime) ((Realtime)selectedNote).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Action_2_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Action_2(); }
            };

        private static _Action_2 new_Action_2(List notes, Model selectedNote) {
            _Action_2 the_new_Action_2 = (_Action_2)_Action_2_FACTORY.object();
            the_new_Action_2.notes = notes;
the_new_Action_2.selectedNote = selectedNote;
            return the_new_Action_2;
        }
    
        private static class _Action_3 extends RealtimeObject implements Action {

            private _Action_3() {}

            List notes; Model selectedNote;

             
	    public void run() {
		notes.remove(selectedNote.get());
		if(notes.isEmpty())
		    notes.add(new Note());
		selectedNote.set(notes.get(0));
	    }
	

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(notes instanceof Realtime) ((Realtime)notes).move(os); if(selectedNote instanceof Realtime) ((Realtime)selectedNote).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Action_3_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Action_3(); }
            };

        private static _Action_3 new_Action_3(List notes, Model selectedNote) {
            _Action_3 the_new_Action_3 = (_Action_3)_Action_3_FACTORY.object();
            the_new_Action_3.notes = notes;
the_new_Action_3.selectedNote = selectedNote;
            return the_new_Action_3;
        }
    
        private static class _Transform_4 extends RealtimeObject implements Transform {

            private _Transform_4() {}

            ;

            
		public Object transform(Object o) {
		    Note note = (Note)o;
		    return Lobs.hbox(Lobs.text(note.title));
		}
	    

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Transform_4_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Transform_4(); }
            };

        private static _Transform_4 new_Transform_4() {
            _Transform_4 the_new_Transform_4 = (_Transform_4)_Transform_4_FACTORY.object();
            
            return the_new_Transform_4;
        }
    
        private static class _Model_5 extends RealtimeObject implements Model {

            private _Model_5() {}

            Model selectedNote;

            
		public Object get() { 
		    Note note = (Note)selectedNote.get();
		    return note.title;
		}
		public void set(Object o) {
		    Note note = (Note)selectedNote.get();
		    note.title = (String)o;
		}
		public int getInt() { throw new Error(); }
		public void set(int value) { throw new Error(); }
	    

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(selectedNote instanceof Realtime) ((Realtime)selectedNote).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Model_5_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Model_5(); }
            };

        private static _Model_5 new_Model_5(Model selectedNote) {
            _Model_5 the_new_Model_5 = (_Model_5)_Model_5_FACTORY.object();
            the_new_Model_5.selectedNote = selectedNote;
            return the_new_Model_5;
        }
    
        private static class _Model_6 extends RealtimeObject implements Model {

            private _Model_6() {}

            Model selectedNote;

            
		public Object get() { 
		    Note note = (Note)selectedNote.get();
		    return note.body;
		}
		public void set(Object o) {
		    Note note = (Note)selectedNote.get();
		    note.body = (String)o;
		}
		public int getInt() { throw new Error(); }
		public void set(int value) { throw new Error(); }
	    

            public boolean move(ObjectSpace os) {
                if(super.move(os)) {
                    if(selectedNote instanceof Realtime) ((Realtime)selectedNote).move(os); 
                    return true;
                }
                return false;
            }
        }

        private static final RealtimeObject.Factory _Model_6_FACTORY =
            new RealtimeObject.Factory() {
                protected Object create() { return new _Model_6(); }
            };

        private static _Model_6 new_Model_6(Model selectedNote) {
            _Model_6 the_new_Model_6 = (_Model_6)_Model_6_FACTORY.object();
            the_new_Model_6.selectedNote = selectedNote;
            return the_new_Model_6;
        }
    }
