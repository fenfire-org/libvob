/*
TranslationDemo.rj
 *    
 *    Copyright (c) 2005, Matti J. Katila
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 */
/*
 * Written by Matti J. Katila
 */


package org.nongnu.libvob.demo;
import org.nongnu.libvob.impl.NewLobMain;
import org.nongnu.libvob.lob.lobs.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.*;
import javolution.realtime.*;
import java.awt.Color;

public class TranslationDemo extends NewLobMain {
    static private void p(String s) { System.out.println("Trans:: "+s); }


    public TranslationDemo(Color bg) {
	super(bg);
    }
	
    private Lob dragController(Lob delegate, int button, TranslationDemo tr) {
	return new @realtime DragController(@set Lob delegate, 
					    @set int button, 
					    TranslationDemo tr) {
	    protected Object getKey() {	return super.getKey()+"DRAG"; }

	    protected Lob wrap(Lob l) {
		return tr.dragController(l, button, tr);
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		//p(e+" cs: "+cs+" xy: "+x+":"+y);
		tr.X = x;
		tr.Y = y;
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    private Lob scaleController(Lob delegate, int button, TranslationDemo tr) {
	return new @realtime DragController(@set Lob delegate, 
					    @set int button, 
					    TranslationDemo tr) {
	    protected Object getKey() { return super.getKey()+"SCALE"; }

	    protected Lob wrap(Lob l) {
		return tr.scaleController(l, button, tr);
	    }
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		//p(e+" cs: "+cs+" xy: "+x+":"+y);
		float zoom = (starty-y)/100f;
		//p("Z: "+tr.zoom+", zoom: "+zoom+", starty: "+starty+", y: "+y);
		if (zoom > 0.3 || zoom < -0.3) zoom = 0;
		starty = y;

		//p("Z: "+tr.zoom+", zoom: "+zoom+", starty: "+starty+", y: "+y);
		tr.zoom *= (1+ zoom);
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }

    float X = 50, Y = 50, zoom = 1;
    boolean one = true;

    public Lob createLob() {
	Lob l;
	// put in a huge table to make things slower..
	
	TableLob.Table table = new @realtime-i TableLob.Table() {
	    public int getRowCount() { return 100; }
	    public int getColumnCount() { return 100; }

	    public Lob getLob(int row, int column) {
		return Lobs.filledRect(java.awt.Color.red);
	    }
	};

	if (one)
	    l = Lobs.filledRect(java.awt.Color.black);
	else
	    l = TableLob.newInstance(table);
	float w = 400;
	float h = 200;
	l = Lobs.request(l, w,w,w,h,h,h);

	l = Lobs.scale(l, zoom);
	l = scaleController(l, 3, this);

	l = Lobs.translate(l, X, Y);
	l = dragController(l, 1, this);

	//l = Lobs.debug(l, "bluff");
	l = DragManager.newInstance(l);
	l = Lobs.keyController(l, Maps.map(" ", 
					   new Action() {
					       public void run() {	
						   System.out.println("ONE "+
								      one);
						   one = !one;
					       }		
					       public boolean move(javolution.realtime.Realtime.ObjectSpace o) { return false; }
					       public javolution.lang.Text toText() { return null; }
					   }));
	return l;
    }
    public static void main(String[] argv) {
	TranslationDemo demo = new TranslationDemo(new Color(1, 1, .8f));
	demo.start();
    }
}
