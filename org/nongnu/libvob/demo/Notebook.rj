/* -*-java-*-
Notebook.rj
 *    
 *    Copyright (c) 2004, Benja Fallenstein.
 *
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.demo;
import org.nongnu.libvob.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.impl.NewLobMain;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class Notebook extends NewLobMain {

    protected static class Note {
	protected String title = "New note "+new Date();
	protected String body = "";

	public String getTitle() { return title; }
	public String getBody() { return body; }
	public void setTitle(String title) { this.title = title; }
	public void setBody(String body) { this.body = body; }
    }

    protected List notes = new ArrayList();
    protected Model selectedNote = SimpleModel.newInstance();

    public Notebook(Color bg) {
	super(bg);

	selectedNote.set(new Note());
	notes.add(new Note());
	notes.add(selectedNote.get());
	notes.add(new Note());
    }

    public Lob createLob() {
	Action quit = new @realtime-i Action() { 
	    public void run() {
		System.exit(0);
	    }
	};
	Action newNote = new @realtime-i Action(List notes, Model selectedNote) { 
	    public void run() {
		Note n = new Note();
		notes.add(n);
		selectedNote.set(n);
	    }
	};
	Action deleteNote = new @realtime-i Action(List notes, Model selectedNote) { 
	    public void run() {
		notes.remove(selectedNote.get());
		if(notes.isEmpty())
		    notes.add(new Note());
		selectedNote.set(notes.get(0));
	    }
	};


	Lob outerVBox = Lobs.vbox();

	Lob menubar = Components.menubar();

	RoleContext.enter("MENU"); 
	try {
	    RoleContext.enter("File");
	    try {
		Lob filemenu = Components.menu();
		filemenu.add(Components.menuitem("Quit", quit));

		Lob l = RoleContext.lob(Components.menuitem("File", filemenu));
		menubar.add(l);
	    } finally {
		RoleContext.exit();
	    }

	    RoleContext.enter("Note");
	    try {
		Lob notemenu = Components.menu();
		notemenu.add(Components.menuitem("New note", newNote));
		notemenu.add(Components.menuitem("Delete note", deleteNote));

		Lob l = RoleContext.lob(Components.menuitem("Note", notemenu));
		menubar.add(l);
	    } finally {
		RoleContext.exit();
	    }

	    outerVBox.add(RoleContext.lob(menubar));
	} finally {
	    RoleContext.exit();
	}

	/*
	Menu filemenu = menubar.addMenu("File");
	filemenu.add("Quit", quit);

	Menu notemenu = menubar.addMenu("Note");
	notemenu.add("New note", newNote);
	notemenu.add("Delete note", deleteNote);
	*/

	outerVBox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	Lob hbox = Lobs.hbox();

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	Lob noteList = Components.listBox(notes, Maps.map(
	    "selected", selectedNote,
	    "transform", new @realtime-i Transform() {
		public Object transform(Object o) {
		    Note note = (Note)o;
		    return Lobs.hbox(Lobs.text(note.title));
		}
	    }));

	noteList = Lobs.key(noteList, "note list");

	hbox.add(Lobs.request(Axis.X, noteList, 100, 250, 250));

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	Lob vbox = Lobs.vbox();

	RoleContext.enter("title"); 
	try {
	    Model titleModel = new @realtime-i Model(Model selectedNote) {
		public Object get() { 
		    Note note = (Note)selectedNote.get();
		    return note.title;
		}
		public void set(Object o) {
		    Note note = (Note)selectedNote.get();
		    note.title = (String)o;
		}
		public int getInt() { throw new Error(); }
		public void set(int value) { throw new Error(); }
	    };

	    Lob titleLob = Components.textBox(titleModel, Maps.map());
	    titleLob = RoleContext.lob(titleLob);
	    vbox.add(titleLob);
	} finally {
	    RoleContext.exit();
	}

	vbox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	RoleContext.enter("body"); 
	try {
	    Model bodyModel = new @realtime-i Model(Model selectedNote) {
		public Object get() { 
		    Note note = (Note)selectedNote.get();
		    return note.body;
		}
		public void set(Object o) {
		    Note note = (Note)selectedNote.get();
		    note.body = (String)o;
		}
		public int getInt() { throw new Error(); }
		public void set(int value) { throw new Error(); }
	    };
	    
	    Lob bodyLob = Components.textArea(bodyModel, Maps.map());
	    bodyLob = Lobs.request(Axis.Y, bodyLob, 30, 100, SizeRequest.INF);
	    bodyLob = RoleContext.lob(bodyLob);
	    vbox.add(bodyLob);
	} finally {
	    RoleContext.exit();
	}

	hbox.add(vbox);

	hbox.add(Lobs.glue(Axis.X, 5, 5, 5));

	outerVBox.add(hbox);

	outerVBox.add(Lobs.glue(Axis.Y, 5, 5, 5));

	Lob lob = outerVBox;

	/*
	KeyController k = new KeyController(new FocusLob(outerVBox));
	k.add("Ctrl-N", newNote);
	*/

	return PopupManager.newInstance(lob);
    }

    public static void main(String[] argv) {
	Notebook demo = new Notebook(new Color(1, 1, .8f));
	demo.start();
    }
}
