/* -*-java-*-
Puzzle.rj
 *    
 *    Copyright (c) 2005, Benja Fallenstein.
 *
 *    This file is part of Libvob.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.nongnu.libvob.demo;
import org.nongnu.libvob.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.TableLob;
import org.nongnu.libvob.impl.NewLobMain;
import javolution.realtime.*;
import javolution.lang.*;
import java.awt.Color;
import java.util.*;

public class Puzzle extends NewLobMain {

    public Puzzle(Color bg) {
	super(bg);
    }

    public Lob createLob() {
	return lob(Maps.map());
    }

    public static Lob piece(int i) {
	if(i < 0)
	    return Lobs.nullLob();

	Lob l;

	RoleContext.enter(new Integer(i));
	try {
	    l = Components.label(""+i);
	    l = Lobs.align(l, .5f, .5f);
	    l = Lobs.request(l, 30, 30, 30, 30, 30, 30);
	    l = Components.frame(l);
	    l = Lobs.margin(l, 10);
	    l = RoleContext.lob(l);
	} finally {
	    RoleContext.exit();
	}
	
	return l;
    }

    public static Action moveAction(PuzzleBoard board, Axis axis, int dir) {
	return new @realtime-i Action(PuzzleBoard board, Axis axis, int dir) {
	    public void run() {
		if(axis == Axis.X)
		    board.movePiece(board.getGapRow(), 
				    board.getGapColumn() - dir);
		else
		    board.movePiece(board.getGapRow() - dir, 
				    board.getGapColumn());

		Lobs.getWindowAnimation().animate();
	    }
	};
    }

    public static Lob lob(Map params) {
	PuzzleBoard board = 
	    (PuzzleBoard)Components.getState(params, "board", null);
	
	if(board == null) {
	    board = PuzzleBoard.newInstance();
	    Components.setState(params, "board", board);
	}

	TableLob.Table table = new @realtime-i TableLob.Table(PuzzleBoard board) {
	    public int getRowCount() { return 4; }
	    public int getColumnCount() { return 4; }

	    public Lob getLob(int row, int column) {
		Lob lob = piece(board.getPiece(row, column));

		lob = Lobs.clickController(lob, 1, new @realtime-i Action(PuzzleBoard board, int row, int column) {
		    public void run() {
			board.movePiece(row, column);
		    }
		});

		return lob;
	    }
	};

	Lob l = Lobs.align(TableLob.newInstance(table), .5f, .5f);

	PuzzleBoard b = board;
	l = Lobs.keyController(l, Maps.map("Up", moveAction(b, Axis.Y, -1),
					   "Down", moveAction(b, Axis.Y, 1),
					   "Left", moveAction(b, Axis.X, -1),
					   "Right", moveAction(b, Axis.X, 1)));

	return l;
    }

    public static void main(String[] argv) {
	Puzzle demo = new Puzzle(new Color(1, 1, .8f));
	demo.start();
    }
}
